---
import {getCollection} from "astro:content";
import { LinkCard, CardGrid } from '@astrojs/starlight/components';
import type { HTMLAttributes } from 'astro/types'

interface Props {
  dir?: string;
  recurse?: string;
}

const { dir, recurse } = Astro.props;
const {slug} = Astro.params;
const compstring = (slug !== undefined) ? slug : '';

const recurseComp: string = (recurse !== undefined) ? recurse : 'false';

let count2 = 0;
const allPages = await getCollection('docs');

console.log(`found ${allPages.length} starting with ${compstring}`)

let searchPages = allPages.filter((p) => {
  //using undefined because I do not know how to get the actual locale for the browser reliably.
  const compstring = (slug !== undefined) ? slug : '';
  if(!p.slug.includes(compstring)){
    return false;
  } else {
    if(!recurseComp.toLocaleLowerCase().localeCompare('true')){
      if(p.slug.localeCompare(compstring, undefined, {sensitivity: 'base'})) {
        return p.slug.toLocaleLowerCase().startsWith(dir ? dir : compstring);
      }
    } else {
      if(p.slug.localeCompare(compstring, undefined, {sensitivity: 'base'})) {
        if(p.slug.toLocaleLowerCase().startsWith(dir ? dir : compstring)) {
          let base = compstring;
          let pComp: string = p.slug;
          while (base.length  > 0 && pComp.toLocaleLowerCase().startsWith(base)) {
            base = base.substring(1);
            pComp = pComp.substring(1);
          }
          if(pComp.lastIndexOf('/') !== 0){
            console.log(`includes / pComp is ${pComp}`)
            return false;
          } else {
            return true;
          }
        }
      }
    }
  }
})

searchPages = searchPages.sort((a,b) => {
  if(a.data.sidebar.order && b.data.sidebar.order) {
    return a.data.sidebar.order - b.data.sidebar.order;
  } else if (a.data.sidebar.order) {
    return 0 - a.data.sidebar.order;
  } else if (b.data.sidebar.order) {
    return b.data.sidebar.order - 0
  } else {
    return (a.data.title.localeCompare(b.data.title, undefined, {sensitivity: 'base'}))
  }
})

const count = searchPages.length
const test = ["one", "two", "three"]

let commentString = '<!--\n'
commentString = `${commentString}count is ${count}\n`
commentString = `${commentString}count2 is ${count2}\n`
commentString = `${commentString}slug is ${slug}\n`;
commentString = `${commentString}-->`;
---
<Fragment set:html={commentString} />

<CardGrid stagger>
  { searchPages.map((p) => (
    <LinkCard href={'/'.concat(p.slug)} title={p.data.title} description={p.data.description}/>
  ))}
</CardGrid>
