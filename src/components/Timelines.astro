---
import { getCollection, getEntry,  } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import type { Props } from '@astrojs/starlight/props';
import { Debug } from 'astro:components';

import { type event, type history} from '../content/config';

import rehypeStringify from 'rehype-stringify'
import remarkGfm from 'remark-gfm'
import remarkParse from 'remark-parse'
import remarkRehype from 'remark-rehype'
import {unified, } from 'unified'
import {DateTime} from 'luxon';

interface displayableEntry {
  date: DateTime,
  entries: event[]
}

let allEvents: CollectionEntry<'history'>[] = await getCollection('history');
const eventsSet = new Set<displayableEntry>();
allEvents.map((event: CollectionEntry<'history'>) => {
    let thisObject: displayableEntry = {
        date: DateTime.fromISO(event.id),
        entries: [event.data.events].flat().map((event) => {
            let description = '';
            if(event.description !== null && event.description !== undefined) {
              description = unified()
                .use(remarkParse)
                .use(remarkGfm)
                .use(remarkRehype)
                .use(rehypeStringify)
                .processSync(event.description)
                .toString()
            }

            let source: string  = '';
            if(event.source !== null && event.source !== undefined) {
              source = unified()
                .use(remarkParse)
                .use(remarkGfm)
                .use(remarkRehype)
                .use(rehypeStringify)
                .processSync(event.source)
                .toString()
            }

            return {
                type: event.type,
                blurb: event.blurb,
                description: description,
                date: event.date,
                source: (source !== undefined) ? source : '',
            }
        })
    }
    if(!thisObject.date.isValid) {
      console.log(`date for ${event.id} is invalid`)
      if(thisObject.entries[0].date !== null && 
        thisObject.entries[0].date !== undefined
        ) {
        thisObject.date = DateTime.fromISO(thisObject.entries[0].date.toString().padStart(4, '0'))
        console.log(`date for ${event.id} is now ${thisObject.date}`)
        thisObject.entries.map((e) => {
          const d = e.date !== undefined ? e.date.toString().padStart(4, '0') : '0000-00-00';
          const te = {
            date: DateTime.fromISO(d),
            entries: [e]
          }
          eventsSet.add(te);
        })
      }
    } else {
      eventsSet.add(thisObject);
    }
})

const events = [...eventsSet].flat().sort((a, b) => {

    if(a.date < b.date ) {
        return -1;
    } else if (a.date > b.date) {
        return 1;
    } else {
        return 0;
    }
});

---
<ul class="timeline ">
    {events.map(event => (
            <li class="" id={event.date.toUnixInteger()}>
                <h5 class="">{event.date.toISODate()}</h5>
                {event.entries.map((entry, index) => (
                        <div class=` ${entry.type}`>
                            <h6 >{entry.blurb}</h6>
                            <span class="not-content">
                              <Fragment set:html={entry.description} />
                              { ( entry.source !== '') && <a href=`#${event.date.toUnixInteger()}-${index}`>Sources</a> }
                            </span>
                        </div>
                ))}

            </li>
    ))}

</ul>

<section data-footnotes class=" footnotes">
    <ol>
        {events.map(event => event.entries.map((entry, index) => (
          <>
          {(entry.source !== '') && 
            <li id={`${event.date.toUnixInteger()}-${index}`}>
              <Fragment set:html={entry.source} />
            </li>
          }
        </>
        )
        ))}
    </ol>
</section>

<style>
    .magical {
        background-color: var(--sl-color-purple-low)
    }

    .mundane {
        background-color: var(--sl-color-gray-6);
    }

    .religious {
        background-color: var(--sl-color-orange-low)
    }


    ul.timeline {
        list-style-type: none;
        position: relative;
    }

    ul.timeline:before {
        content: ' ';
        background: #bebebe;
        display: inline-block;
        position: absolute;
        left: 0.5em;
        width: 0.2em;
        height: 100%;
    }

    ul.timeline > li {
        margin: 0.75em 0;
        padding-left: 0.2em;
    }

    ul.timeline > li:first-child {
        padding-top: 0.03em;
    }

    ul.timeline > li:before {
        content: ' ';
        background: white;
        display: inline-block;
        position: absolute;
        border-radius: 50%;
        border: solid .2em #bebebe;
        left: 0.1em;
        width: 1em;
        height: 1em;
        margin-top: 0.25em;
    }
</style>
