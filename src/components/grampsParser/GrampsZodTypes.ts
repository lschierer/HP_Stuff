//this file generated by app.quicktype.io

import * as z from "zod";

export const QualitySchema = z.enum([
    "calculated",
    "estimated",
]);
export type Quality = z.infer<typeof QualitySchema>;


export const DatevalTypeSchema = z.enum([
    "about",
    "before",
]);
export type DatevalType = z.infer<typeof DatevalTypeSchema>;


export const EventTypeSchema = z.enum([
    "Birth",
    "Death",
    "Education",
    "Elected",
    "Engagement",
    "Hogwarts Sorting",
    "Marriage",
    "Retirement",
]);
export type EventType = z.infer<typeof EventTypeSchema>;


export const RoleSchema = z.enum([
    "Bride",
    "Family",
    "Groom",
    "Primary",
]);
export type Role = z.infer<typeof RoleSchema>;


export const RelTypeSchema = z.enum([
    "Civil Union",
    "Married",
    "Unknown",
    "Unmarried",
]);
export type RelType = z.infer<typeof RelTypeSchema>;


export const GenderSchema = z.enum([
    "F",
    "M",
    "U",
]);
export type Gender = z.infer<typeof GenderSchema>;


export const DerivationSchema = z.enum([
    "Given",
    "Location",
    "Taken",
    "Unknown",
]);
export type Derivation = z.infer<typeof DerivationSchema>;


export const NameTypeSchema = z.enum([
    "Also Known As",
    "Birth Name",
    "Married Name",
    "Unknown",
]);
export type NameType = z.infer<typeof NameTypeSchema>;


export const RepositoryTypeSchema = z.enum([
    "Library",
    "Web site",
]);
export type RepositoryType = z.infer<typeof RepositoryTypeSchema>;


export const UrlTypeSchema = z.enum([
    "Web Home",
]);
export type UrlType = z.infer<typeof UrlTypeSchema>;


export const MediumSchema = z.enum([
    "Electronic",
]);
export type Medium = z.infer<typeof MediumSchema>;

export const XmlSchema = z.object({
    "version": z.number(),
    "encoding": z.string(),
});
export type Xml = z.infer<typeof XmlSchema>;

export const TagSchema = z.object({
    "handle": z.string(),
    "change": z.number(),
    "name": z.string(),
    "color": z.string(),
    "priority": z.number(),
});
export type Tag = z.infer<typeof TagSchema>;

export const TagsSchema = z.object({
    "tag": z.array(TagSchema),
});
export type Tags = z.infer<typeof TagsSchema>;

export const ReporefElementSchema = z.object({
    "hlink": z.string(),
    "medium": MediumSchema,
});
export type ReporefElement = z.infer<typeof ReporefElementSchema>;

export const SourceSchema = z.object({
    "stitle": z.string(),
    "sauthor": z.string(),
    "spubinfo": z.union([z.null(), z.string()]).optional(),
    "handle": z.string(),
    "change": z.number(),
    "id": z.string(),
    "reporef": z.union([z.array(ReporefElementSchema), ReporefElementSchema, z.null()]).optional(),
    "noteref": z.union([SourcerefSchema, z.null()]).optional(),
});
export type Source = z.infer<typeof SourceSchema>;

export const SourcesSchema = z.object({
    "source": z.array(SourceSchema),
});
export type Sources = z.infer<typeof SourcesSchema>;

export const UrlSchema = z.object({
    "href": z.string(),
    "type": UrlTypeSchema,
    "description": z.union([z.null(), z.string()]).optional(),
});
export type Url = z.infer<typeof UrlSchema>;

export const RepositorySchema = z.object({
    "rname": z.string(),
    "type": RepositoryTypeSchema,
    "handle": z.string(),
    "change": z.number(),
    "id": z.string(),
    "url": z.union([UrlSchema, z.null()]).optional(),
});
export type Repository = z.infer<typeof RepositorySchema>;

export const RepositoriesSchema = z.object({
    "repository": z.array(RepositorySchema),
});
export type Repositories = z.infer<typeof RepositoriesSchema>;

export const PnameSchema = z.object({
    "value": z.string(),
});
export type Pname = z.infer<typeof PnameSchema>;

export const CoordSchema = z.object({
    "long": z.union([z.number(), z.string()]),
    "lat": z.union([z.number(), z.string()]),
});
export type Coord = z.infer<typeof CoordSchema>;

export const PlaceobjSchema = z.object({
    "pname": PnameSchema,
    "coord": z.union([CoordSchema, z.null()]).optional(),
    "placeref": z.union([SourcerefSchema, z.null()]).optional(),
    "handle": z.string(),
    "change": z.number(),
    "id": z.string(),
    "type": z.string(),
    "citationref": z.union([SourcerefSchema, z.null()]).optional(),
});
export type Placeobj = z.infer<typeof PlaceobjSchema>;

export const PlacesSchema = z.object({
    "placeobj": z.array(PlaceobjSchema),
});
export type Places = z.infer<typeof PlacesSchema>;

export const PersonrefSchema = z.object({
    "hlink": z.string(),
    "rel": z.string(),
});
export type Personref = z.infer<typeof PersonrefSchema>;

export const SurnameClassSchema = z.object({
    "#text": z.string(),
    "derivation": DerivationSchema,
});
export type SurnameClass = z.infer<typeof SurnameClassSchema>;

export const NameElementSchema = z.object({
    "first": z.union([z.null(), z.string()]).optional(),
    "call": z.union([z.null(), z.string()]).optional(),
    "surname": z.union([SurnameClassSchema, z.string()]),
    "citationref": z.union([SourcerefSchema, z.null()]).optional(),
    "type": NameTypeSchema,
    "alt": z.union([z.number(), z.null()]).optional(),
    "suffix": z.union([z.null(), z.string()]).optional(),
    "nick": z.union([z.null(), z.string()]).optional(),
    "title": z.union([z.null(), z.string()]).optional(),
});
export type NameElement = z.infer<typeof NameElementSchema>;

export const AddressSchema = z.object({
    "state": z.string(),
    "country": z.string(),
    "citationref": SourcerefSchema,
});
export type Address = z.infer<typeof AddressSchema>;

export const PersonSchema = z.object({
    "gender": GenderSchema,
    "name": z.union([z.array(NameElementSchema), NameElementSchema]),
    "eventref": z.union([z.array(EventrefElementSchema), EventrefElementSchema, z.null()]).optional(),
    "childof": z.union([z.array(SourcerefSchema), SourcerefSchema, z.null()]).optional(),
    "parentin": z.union([z.array(SourcerefSchema), SourcerefSchema, z.null()]).optional(),
    "tagref": z.union([z.array(SourcerefSchema), SourcerefSchema, z.null()]).optional(),
    "handle": z.string(),
    "change": z.number(),
    "id": z.string(),
    "noteref": z.union([SourcerefSchema, z.null()]).optional(),
    "citationref": z.union([z.array(SourcerefSchema), SourcerefSchema, z.null()]).optional(),
    "personref": z.union([PersonrefSchema, z.null()]).optional(),
    "address": z.union([AddressSchema, z.null()]).optional(),
});
export type Person = z.infer<typeof PersonSchema>;

export const PeopleSchema = z.object({
    "person": z.array(PersonSchema),
});
export type People = z.infer<typeof PeopleSchema>;

export const NoteSchema = z.object({
    "text": z.string(),
    "handle": z.string(),
    "change": z.number(),
    "id": z.string(),
    "type": z.string(),
});
export type Note = z.infer<typeof NoteSchema>;

export const NotesSchema = z.object({
    "note": z.array(NoteSchema),
});
export type Notes = z.infer<typeof NotesSchema>;

export const ResearcherSchema = z.object({
    "resname": z.string(),
    "resemail": z.string(),
});
export type Researcher = z.infer<typeof ResearcherSchema>;

export const CreatedSchema = z.object({
    "date": z.string(),
    "version": z.string(),
});
export type Created = z.infer<typeof CreatedSchema>;

export const HeaderSchema = z.object({
    "created": CreatedSchema,
    "researcher": ResearcherSchema,
});
export type Header = z.infer<typeof HeaderSchema>;

export const RelSchema = z.object({
    "type": RelTypeSchema,
});
export type Rel = z.infer<typeof RelSchema>;

export const EventrefElementSchema = z.object({
    "hlink": z.string(),
    "role": RoleSchema,
});
export type EventrefElement = z.infer<typeof EventrefElementSchema>;

export const PurpleChildrefSchema = z.object({
    "hlink": z.string(),
    "citationref": z.union([SourcerefSchema, z.null()]).optional(),
    "noteref": z.union([SourcerefSchema, z.null()]).optional(),
});
export type PurpleChildref = z.infer<typeof PurpleChildrefSchema>;

export const ChildrefElementSchema = z.object({
    "hlink": z.string(),
    "citationref": z.union([SourcerefSchema, z.null()]).optional(),
    "mrel": z.union([z.null(), z.string()]).optional(),
    "frel": z.union([z.null(), z.string()]).optional(),
});
export type ChildrefElement = z.infer<typeof ChildrefElementSchema>;

export const FamilySchema = z.object({
    "rel": RelSchema,
    "father": z.union([SourcerefSchema, z.null()]).optional(),
    "mother": z.union([SourcerefSchema, z.null()]).optional(),
    "eventref": z.union([EventrefElementSchema, z.null()]).optional(),
    "childref": z.union([z.array(ChildrefElementSchema), PurpleChildrefSchema, z.null()]).optional(),
    "citationref": z.union([z.array(SourcerefSchema), SourcerefSchema, z.null()]).optional(),
    "handle": z.string(),
    "change": z.number(),
    "id": z.string(),
    "noteref": z.union([SourcerefSchema, z.null()]).optional(),
    "tagref": z.union([SourcerefSchema, z.null()]).optional(),
});
export type Family = z.infer<typeof FamilySchema>;

export const FamiliesSchema = z.object({
    "family": z.array(FamilySchema),
});
export type Families = z.infer<typeof FamiliesSchema>;

export const EventDatevalSchema = z.object({
    "val": z.union([z.number(), z.string()]),
    "type": z.union([DatevalTypeSchema, z.null()]).optional(),
    "quality": z.union([QualitySchema, z.null()]).optional(),
});
export type EventDateval = z.infer<typeof EventDatevalSchema>;

export const DatestrSchema = z.object({
    "val": z.string(),
});
export type Datestr = z.infer<typeof DatestrSchema>;

export const DaterangeClassSchema = z.object({
    "start": z.union([z.number(), z.string()]),
    "stop": z.union([z.number(), z.string()]),
    "quality": z.union([QualitySchema, z.null()]).optional(),
});
export type DaterangeClass = z.infer<typeof DaterangeClassSchema>;

export const AttributeSchema = z.object({
    "citationref": SourcerefSchema,
    "type": z.string(),
    "value": z.number(),
});
export type Attribute = z.infer<typeof AttributeSchema>;

export const EventSchema = z.object({
    "type": EventTypeSchema,
    "dateval": z.union([EventDatevalSchema, z.null()]).optional(),
    "citationref": z.union([z.array(SourcerefSchema), SourcerefSchema, z.null()]).optional(),
    "handle": z.string(),
    "change": z.number(),
    "id": z.string(),
    "noteref": z.union([SourcerefSchema, z.null()]).optional(),
    "place": z.union([SourcerefSchema, z.null()]).optional(),
    "attribute": z.union([AttributeSchema, z.null()]).optional(),
    "datespan": z.union([DaterangeClassSchema, z.null()]).optional(),
    "daterange": z.union([DaterangeClassSchema, z.null()]).optional(),
    "description": z.union([z.null(), z.string()]).optional(),
    "tagref": z.union([SourcerefSchema, z.null()]).optional(),
    "datestr": z.union([DatestrSchema, z.null()]).optional(),
});
export type Event = z.infer<typeof EventSchema>;

export const EventsSchema = z.object({
    "event": z.array(EventSchema),
});
export type Events = z.infer<typeof EventsSchema>;

export const SourcerefSchema = z.object({
    "hlink": z.string(),
});
export type Sourceref = z.infer<typeof SourcerefSchema>;

export const CitationDatevalSchema = z.object({
    "val": z.union([z.number(), z.string()]),
});
export type CitationDateval = z.infer<typeof CitationDatevalSchema>;

export const CitationSchema = z.object({
    "page": z.union([z.number(), z.null(), z.string()]).optional(),
    "confidence": z.number(),
    "sourceref": SourcerefSchema,
    "handle": z.string(),
    "change": z.number(),
    "id": z.string(),
    "dateval": z.union([CitationDatevalSchema, z.null()]).optional(),
    "noteref": z.union([SourcerefSchema, z.null()]).optional(),
});
export type Citation = z.infer<typeof CitationSchema>;

export const CitationsSchema = z.object({
    "citation": z.array(CitationSchema),
});
export type Citations = z.infer<typeof CitationsSchema>;

export const DatabaseSchema = z.object({
    "header": HeaderSchema,
    "tags": TagsSchema,
    "events": EventsSchema,
    "people": PeopleSchema,
    "families": FamiliesSchema,
    "citations": CitationsSchema,
    "sources": SourcesSchema,
    "places": PlacesSchema,
    "repositories": RepositoriesSchema,
    "notes": NotesSchema,
    "xmlns": z.string(),
});
export type Database = z.infer<typeof DatabaseSchema>;

export const ExportSchema = z.object({
    "?xml": XmlSchema,
    "database": DatabaseSchema,
});
export type Export = z.infer<typeof ExportSchema>;
