---
interface Props {
  icon: string;
  iconclasses: string;
  inline?: boolean;
  width?: string;
  height?: string;
}

const {icon, inline, width, height, iconclasses } = Astro.props;


---
<astro-icon icon={icon} inline={inline} width={width} height={height} iconclasses={iconclasses}></astro-icon>
<script>
  import "iconify-icon"
  export default class AstroIcon extends HTMLElement {
    private icon: string = "";
    private inline: boolean = true;
    private width: string = "";
    private height: string = "";
    private iconclasses: string = "";

    connectedCallback() {
      const attributes = this.getAttributeNames();
      if(attributes.includes('icon')) {
        this.icon = this.getAttribute('icon') ?? "";
      }

      if(attributes.includes('inline')) {
        const inline = this.getAttribute('inline');
        if(inline != undefined && inline != null && inline.length > 0) {
          if(!inline.toLowerCase().localeCompare('true')) {
            this.inline = true;
          } else {
            this.inline = false;
          }
        } else {
          this.inline = false;
        }
      }

      if(attributes.includes('width')) {
       const width =  this.getAttribute('width');
       this.width = (width != null) ? width : '';
      }

      if(attributes.includes('height')) {
       const height =  this.getAttribute('height');
       this.height = (height != null) ? height : '';
      }

      if(attributes.includes('iconclasses')) {
        const iconclasses = this.getAttribute('iconclasses');
        this.iconclasses = (iconclasses != null) ? iconclasses : "";

      }
      console.log(`iconclasses are "${this.iconclasses}"`)
      this.innerHTML=`
        <iconify-icon
          icon="${this.icon}"
          ${this.inline ? "inline" : "" }
          ${(this.width.length > 0) ? `width="${this.width}"` : ""}
          ${(this.height.length > 0) ? `height="${this.height}"` : ""}
          ${(this.iconclasses.length > 0) ?
          `class="icon ${this.iconclasses}"` : `class="icon"` }
        ></iconify-icon>
      `;
    }
  }
  customElements.define("astro-icon", AstroIcon);
</script>
